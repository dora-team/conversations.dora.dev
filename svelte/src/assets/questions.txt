What if CI were to automatically delete PRs that exceed a certain size or have been open beyond a certain length of time?
If you discovered a market-winning feature today, how long until you start working on it?
What’s the most vulnerable part of your software delivery platform? What are you doing about that?
A critical security patch needs immediate release, but a major new feature is scheduled for the same day. How do you balance these competing priorities?
You inherit a codebase from an unknown developer. What steps do you take to understand, maintain, and update it?
The world is struck by a global internet outage. How would your software delivery process need to adapt?
What’s the worst thing that could possibly happen? What’s the best thing?
How could you reduce the amount of time you spend on prod support?
How long would it take your team to update a single word in your application’s user interface? How many teams would be involved?
What would happen if you ran your test suite 10 times in a row for every build?
What would happen if you turned off every alert in your monitoring system?
What are some benefits your team would realize if your build times were cut in half? If they doubled?
How do you know that the stories in the backlog should be carried forward to the next planning session?
Think about the team who introduces the most friction to your daily work. What incentives might be driving their behavior?
How would your work habits change if you moved to an area that is 5 time zones away from where you currently work?
How are decisions made? Is the process top-down, or is there input from all levels?
Describe the typical workday of a developer (or your desired role). What’s the balance between meetings, focused work, and breaks?
How does the organization approach code quality (code reviews, unit testing, automated testing strategies)?
How would you characterize your documentation practices?
What processes are in place for handling production incidents?
How does your organization measure the success of technical initiatives?
What does your product do, that no other product does?
What would happen if you shut down right now?
Do you use beta or early-access technology (tools, libraries, services)? Under what conditions?
Shift left? Shift down?
How can you and your team effectively delineate your work from others’?
What sociological or philosophical frameworks can we leverage to improve well-being in technical organizations?
Should code review be a blocking requirement before merging? Always, never, sometimes?
How would you know if your nightly tests haven’t been running?
Who’s a person in your organization that can circumvent release schedules to push emergency fixes?
What’s stopping you?
How does your software delivery process change when you’re under pressure to deliver a feature? What about a hotfix?
Who decides what development tools your organization uses? If you wanted to use a new tool, what would you need to do?
What’s your “error budget” for security breaches…is it zero? Does that mean any kind of breach would be organization-ending?
How much reliability is enough? How much is too much?
Oops! You just shipped a user-facing bug! What do you do *right now*? Do you have the access you need? How long will it take?
How fast does your product really have to be? What if it were 0.5 seconds slower? Would anyone care?
What would happen if you doubled your customers next week? How about in the next hour?
What does on-call page volume look like? What is the signal-to-noise ratio? How could it improve?
What would happen if you had a production outage but the most knowledgeable person about that system was on vacation?
What would change if your team got bigger? What would change if your team got smaller?
Is technical debt always a bad thing? How do you decide?
What if your task tracker were to automatically delete backlog tickets open beyond a certain length of time?
How would users be impacted if you performed a production deploy in the middle of the day?
How is AI impacting your daily work?
How would skipping the change approval board effect your application's stability?
What makes development in your industry different from development in other industries? Why do you think that difference exists?
What's the first thing you do when a test fails?  What about when the same test has been failing for days?
Which part of your application annoys or frustrates your users the most?
What would you work on if you were guaranteed two days of uninterrupted focus?
What decisions will we make with this data?
How will measuring $THIS improve our confidence about what we should do next?
